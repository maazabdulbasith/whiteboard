{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\WhiteBoard\\\\client\\\\src\\\\components\\\\Whiteboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport Toolbar from \"./Toolbar\";\nimport DrawingCanvas from \"./DrawingCanvas\";\nimport UserCursors from \"./UserCursors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Whiteboard({\n  socket\n}) {\n  _s();\n  const {\n    roomId\n  } = useParams();\n  const [color, setColor] = useState(\"#000000\");\n  const [strokeWidth, setStrokeWidth] = useState(5);\n  const [userCount, setUserCount] = useState(0);\n  const canvasRef = useRef(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Join the room on component mount\n    socket.emit(\"join-room\", {\n      roomId\n    });\n\n    // Listen for user count updates\n    socket.on(\"user-count-update\", count => {\n      setUserCount(count);\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      socket.off(\"user-count-update\");\n      // Note: Leaving room is handled by server on 'disconnect'\n    };\n  }, [roomId, socket]);\n  const handleClearCanvas = () => {\n    if (window.confirm(\"Are you sure you want to clear the canvas?\")) {\n      const canvas = canvasRef.current;\n      const context = canvas.getContext(\"2d\");\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      socket.emit(\"clear-canvas\", {\n        roomId\n      });\n    }\n  };\n  const handleLeaveRoom = () => {\n    socket.emit(\"leave-room\", {\n      roomId\n    });\n    navigate(\"/\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whiteboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Room: \", roomId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user-count\",\n          children: [\"Active Users: \", userCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"connection-status connected\",\n          children: \"\\u25CF Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"leave-room-btn\",\n          onClick: handleLeaveRoom,\n          children: \"Leave Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Toolbar, {\n      color: color,\n      setColor: setColor,\n      strokeWidth: strokeWidth,\n      setStrokeWidth: setStrokeWidth,\n      handleClearCanvas: handleClearCanvas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UserCursors, {\n      socket: socket,\n      roomId: roomId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DrawingCanvas, {\n      socket: socket,\n      roomId: roomId,\n      color: color,\n      strokeWidth: strokeWidth,\n      canvasRef: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(Whiteboard, \"WGUfy30KDbVMqcb6TOWLljKnNvI=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Whiteboard;\nexport default Whiteboard;\nvar _c;\n$RefreshReg$(_c, \"Whiteboard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","Toolbar","DrawingCanvas","UserCursors","jsxDEV","_jsxDEV","Whiteboard","socket","_s","roomId","color","setColor","strokeWidth","setStrokeWidth","userCount","setUserCount","canvasRef","navigate","emit","on","count","off","handleClearCanvas","window","confirm","canvas","current","context","getContext","clearRect","width","height","handleLeaveRoom","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Projects/WhiteBoard/client/src/components/Whiteboard.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport Toolbar from \"./Toolbar\";\r\nimport DrawingCanvas from \"./DrawingCanvas\";\r\nimport UserCursors from \"./UserCursors\";\r\n\r\nfunction Whiteboard({ socket }) {\r\n    const { roomId } = useParams();\r\n    const [color, setColor] = useState(\"#000000\");\r\n    const [strokeWidth, setStrokeWidth] = useState(5);\r\n    const [userCount, setUserCount] = useState(0);\r\n    const canvasRef = useRef(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        // Join the room on component mount\r\n        socket.emit(\"join-room\", { roomId });\r\n\r\n        // Listen for user count updates\r\n        socket.on(\"user-count-update\", (count) => {\r\n            setUserCount(count);\r\n        });\r\n\r\n        // Cleanup on component unmount\r\n        return () => {\r\n            socket.off(\"user-count-update\");\r\n            // Note: Leaving room is handled by server on 'disconnect'\r\n        };\r\n    }, [roomId, socket]);\r\n\r\n    const handleClearCanvas = () => {\r\n        if (window.confirm(\"Are you sure you want to clear the canvas?\")) {\r\n            const canvas = canvasRef.current;\r\n            const context = canvas.getContext(\"2d\");\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            socket.emit(\"clear-canvas\", { roomId });\r\n        }\r\n    };\r\n\r\n    const handleLeaveRoom = () => {\r\n        socket.emit(\"leave-room\", { roomId });\r\n        navigate(\"/\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"whiteboard-container\">\r\n            <div className=\"header\">\r\n                <h2>Room: {roomId}</h2>\r\n                <div className=\"user-info\">\r\n                    <span className=\"user-count\">\r\n                        Active Users: {userCount}\r\n                    </span>\r\n                    <span className=\"connection-status connected\">\r\n                        ‚óè Connected\r\n                    </span>\r\n                    <button\r\n                        className=\"leave-room-btn\"\r\n                        onClick={handleLeaveRoom}\r\n                    >\r\n                        Leave Room\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <Toolbar\r\n                color={color}\r\n                setColor={setColor}\r\n                strokeWidth={strokeWidth}\r\n                setStrokeWidth={setStrokeWidth}\r\n                handleClearCanvas={handleClearCanvas}\r\n            />\r\n            <UserCursors socket={socket} roomId={roomId} />\r\n            <DrawingCanvas\r\n                socket={socket}\r\n                roomId={roomId}\r\n                color={color}\r\n                strokeWidth={strokeWidth}\r\n                canvasRef={canvasRef}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Whiteboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}