{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\WhiteBoard\\\\client\\\\src\\\\components\\\\DrawingCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DrawingCanvas({\n  socket,\n  roomId,\n  color,\n  strokeWidth,\n  canvasRef\n}) {\n  _s();\n  const [isDrawing, setIsDrawing] = useState(false);\n  const contextRef = useRef(null);\n  const otherDrawings = useRef({}); // To track other users' drawing states\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    // Adjust for device pixel ratio for sharper drawing\n    const scale = window.devicePixelRatio;\n    canvas.width = window.innerWidth * scale;\n    canvas.height = window.innerHeight * scale;\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`;\n    const context = canvas.getContext(\"2d\");\n    context.scale(scale, scale);\n    context.lineCap = \"round\";\n    context.lineJoin = \"round\";\n    contextRef.current = context;\n  }, [canvasRef]);\n\n  // Loads thr initial drawing data\n  useEffect(() => {\n    socket.on(\"load-drawing\", commands => {\n      commands.forEach(cmd => {\n        if (cmd.type === \"stroke\") {\n          drawStroke(cmd.data);\n        }\n      });\n    });\n    return () => socket.off(\"load-drawing\");\n  }, [socket]);\n\n  // Strokes drawing function\n  const drawStroke = data => {\n    const {\n      path,\n      color: strokeColor,\n      width\n    } = data;\n    if (!path || path.length < 2) return;\n    const ctx = contextRef.current;\n    ctx.strokeStyle = strokeColor;\n    ctx.lineWidth = width;\n    ctx.beginPath();\n    ctx.moveTo(path[0].x, path[0].y);\n    path.forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n  };\n\n  // Real-time drawing listeners\n  useEffect(() => {\n    const handleDrawStart = ({\n      id,\n      x,\n      y,\n      color,\n      width\n    }) => {\n      otherDrawings.current[id] = {\n        x,\n        y,\n        color,\n        width\n      };\n    };\n    const handleDrawMove = ({\n      id,\n      x,\n      y\n    }) => {\n      const userDrawing = otherDrawings.current[id];\n      if (userDrawing) {\n        const ctx = contextRef.current;\n        ctx.strokeStyle = userDrawing.color;\n        ctx.lineWidth = userDrawing.width;\n        ctx.beginPath();\n        ctx.moveTo(userDrawing.x, userDrawing.y);\n        ctx.lineTo(x, y);\n        ctx.stroke();\n        userDrawing.x = x;\n        userDrawing.y = y;\n      }\n    };\n    const handleDrawEnd = ({\n      id\n    }) => {\n      delete otherDrawings.current[id];\n    };\n    const handleClear = () => {\n      const canvas = canvasRef.current;\n      contextRef.current.clearRect(0, 0, canvas.width, canvas.height);\n    };\n    socket.on(\"draw-start\", handleDrawStart);\n    socket.on(\"draw-move\", handleDrawMove);\n    socket.on(\"draw-end\", handleDrawEnd);\n    socket.on(\"clear-canvas\", handleClear);\n    return () => {\n      socket.off(\"draw-start\", handleDrawStart);\n      socket.off(\"draw-move\", handleDrawMove);\n      socket.off(\"draw-end\", handleDrawEnd);\n      socket.off(\"clear-canvas\", handleClear);\n    };\n  }, [socket]);\n\n  // Local drawing handlers\n  const currentPath = useRef([]);\n  const startDrawing = ({\n    nativeEvent\n  }) => {\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    setIsDrawing(true);\n    contextRef.current.strokeStyle = color;\n    contextRef.current.lineWidth = strokeWidth;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    currentPath.current = [{\n      x: offsetX,\n      y: offsetY\n    }];\n    socket.emit(\"draw-start\", {\n      roomId,\n      x: offsetX,\n      y: offsetY,\n      color,\n      width: strokeWidth\n    });\n  };\n  const draw = ({\n    nativeEvent\n  }) => {\n    if (!isDrawing) return;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n    currentPath.current.push({\n      x: offsetX,\n      y: offsetY\n    });\n    socket.emit(\"draw-move\", {\n      roomId,\n      x: offsetX,\n      y: offsetY\n    });\n  };\n  const stopDrawing = () => {\n    if (!isDrawing) return;\n    contextRef.current.closePath();\n    setIsDrawing(false);\n    socket.emit(\"draw-end\", {\n      roomId,\n      path: currentPath.current,\n      color: color,\n      width: strokeWidth\n    });\n    currentPath.current = [];\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    onMouseDown: startDrawing,\n    onMouseMove: draw,\n    onMouseUp: stopDrawing,\n    onMouseOut: stopDrawing // Stop if mouse leaves canvas\n    ,\n    onTouchStart: e => startDrawing({\n      nativeEvent: e.touches[0]\n    }),\n    onTouchMove: e => draw({\n      nativeEvent: e.touches[0]\n    }),\n    onTouchEnd: stopDrawing\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n}\n_s(DrawingCanvas, \"ksvNOPS1KTMvDuop/0qAkm0keE8=\");\n_c = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c;\n$RefreshReg$(_c, \"DrawingCanvas\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","DrawingCanvas","socket","roomId","color","strokeWidth","canvasRef","_s","isDrawing","setIsDrawing","contextRef","otherDrawings","canvas","current","scale","window","devicePixelRatio","width","innerWidth","height","innerHeight","style","context","getContext","lineCap","lineJoin","on","commands","forEach","cmd","type","drawStroke","data","off","path","strokeColor","length","ctx","strokeStyle","lineWidth","beginPath","moveTo","x","y","point","lineTo","stroke","handleDrawStart","id","handleDrawMove","userDrawing","handleDrawEnd","handleClear","clearRect","currentPath","startDrawing","nativeEvent","offsetX","offsetY","emit","draw","push","stopDrawing","closePath","ref","onMouseDown","onMouseMove","onMouseUp","onMouseOut","onTouchStart","e","touches","onTouchMove","onTouchEnd","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Projects/WhiteBoard/client/src/components/DrawingCanvas.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nfunction DrawingCanvas({ socket, roomId, color, strokeWidth, canvasRef }) {\r\n    const [isDrawing, setIsDrawing] = useState(false);\r\n    const contextRef = useRef(null);\r\n    const otherDrawings = useRef({}); // To track other users' drawing states\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        // Adjust for device pixel ratio for sharper drawing\r\n        const scale = window.devicePixelRatio;\r\n        canvas.width = window.innerWidth * scale;\r\n        canvas.height = window.innerHeight * scale;\r\n        canvas.style.width = `${window.innerWidth}px`;\r\n        canvas.style.height = `${window.innerHeight}px`;\r\n\r\n        const context = canvas.getContext(\"2d\");\r\n        context.scale(scale, scale);\r\n        context.lineCap = \"round\";\r\n        context.lineJoin = \"round\";\r\n        contextRef.current = context;\r\n    }, [canvasRef]);\r\n\r\n    // Loads thr initial drawing data\r\n    useEffect(() => {\r\n        socket.on(\"load-drawing\", (commands) => {\r\n            commands.forEach((cmd) => {\r\n                if (cmd.type === \"stroke\") {\r\n                    drawStroke(cmd.data);\r\n                }\r\n            });\r\n        });\r\n\r\n        return () => socket.off(\"load-drawing\");\r\n    }, [socket]);\r\n\r\n    // Strokes drawing function\r\n    const drawStroke = (data) => {\r\n        const { path, color: strokeColor, width } = data;\r\n        if (!path || path.length < 2) return;\r\n\r\n        const ctx = contextRef.current;\r\n        ctx.strokeStyle = strokeColor;\r\n        ctx.lineWidth = width;\r\n        ctx.beginPath();\r\n        ctx.moveTo(path[0].x, path[0].y);\r\n        path.forEach((point) => {\r\n            ctx.lineTo(point.x, point.y);\r\n        });\r\n        ctx.stroke();\r\n    };\r\n\r\n    // Real-time drawing listeners\r\n    useEffect(() => {\r\n        const handleDrawStart = ({ id, x, y, color, width }) => {\r\n            otherDrawings.current[id] = { x, y, color, width };\r\n        };\r\n\r\n        const handleDrawMove = ({ id, x, y }) => {\r\n            const userDrawing = otherDrawings.current[id];\r\n            if (userDrawing) {\r\n                const ctx = contextRef.current;\r\n                ctx.strokeStyle = userDrawing.color;\r\n                ctx.lineWidth = userDrawing.width;\r\n                ctx.beginPath();\r\n                ctx.moveTo(userDrawing.x, userDrawing.y);\r\n                ctx.lineTo(x, y);\r\n                ctx.stroke();\r\n                userDrawing.x = x;\r\n                userDrawing.y = y;\r\n            }\r\n        };\r\n\r\n        const handleDrawEnd = ({ id }) => {\r\n            delete otherDrawings.current[id];\r\n        };\r\n\r\n        const handleClear = () => {\r\n            const canvas = canvasRef.current;\r\n            contextRef.current.clearRect(0, 0, canvas.width, canvas.height);\r\n        };\r\n\r\n        socket.on(\"draw-start\", handleDrawStart);\r\n        socket.on(\"draw-move\", handleDrawMove);\r\n        socket.on(\"draw-end\", handleDrawEnd);\r\n        socket.on(\"clear-canvas\", handleClear);\r\n\r\n        return () => {\r\n            socket.off(\"draw-start\", handleDrawStart);\r\n            socket.off(\"draw-move\", handleDrawMove);\r\n            socket.off(\"draw-end\", handleDrawEnd);\r\n            socket.off(\"clear-canvas\", handleClear);\r\n        };\r\n    }, [socket]);\r\n\r\n    // Local drawing handlers\r\n    const currentPath = useRef([]);\r\n\r\n    const startDrawing = ({ nativeEvent }) => {\r\n        const { offsetX, offsetY } = nativeEvent;\r\n        setIsDrawing(true);\r\n        contextRef.current.strokeStyle = color;\r\n        contextRef.current.lineWidth = strokeWidth;\r\n        contextRef.current.beginPath();\r\n        contextRef.current.moveTo(offsetX, offsetY);\r\n        currentPath.current = [{ x: offsetX, y: offsetY }];\r\n        socket.emit(\"draw-start\", {\r\n            roomId,\r\n            x: offsetX,\r\n            y: offsetY,\r\n            color,\r\n            width: strokeWidth,\r\n        });\r\n    };\r\n\r\n    const draw = ({ nativeEvent }) => {\r\n        if (!isDrawing) return;\r\n        const { offsetX, offsetY } = nativeEvent;\r\n        contextRef.current.lineTo(offsetX, offsetY);\r\n        contextRef.current.stroke();\r\n        currentPath.current.push({ x: offsetX, y: offsetY });\r\n        socket.emit(\"draw-move\", { roomId, x: offsetX, y: offsetY });\r\n    };\r\n\r\n    const stopDrawing = () => {\r\n        if (!isDrawing) return;\r\n        contextRef.current.closePath();\r\n        setIsDrawing(false);\r\n        socket.emit(\"draw-end\", {\r\n            roomId,\r\n            path: currentPath.current,\r\n            color: color,\r\n            width: strokeWidth,\r\n        });\r\n        currentPath.current = [];\r\n    };\r\n\r\n    return (\r\n        <canvas\r\n            ref={canvasRef}\r\n            onMouseDown={startDrawing}\r\n            onMouseMove={draw}\r\n            onMouseUp={stopDrawing}\r\n            onMouseOut={stopDrawing} // Stop if mouse leaves canvas\r\n            onTouchStart={(e) => startDrawing({ nativeEvent: e.touches[0] })}\r\n            onTouchMove={(e) => draw({ nativeEvent: e.touches[0] })}\r\n            onTouchEnd={stopDrawing}\r\n        />\r\n    );\r\n}\r\n\r\nexport default DrawingCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}